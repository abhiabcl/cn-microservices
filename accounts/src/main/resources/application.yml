server:
  port: 8080
spring:
  application:
    name: "accounts"
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true  # enable web login /h2-console
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
#  profiles:
#    active: "qa"
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    function:
      definition: updateCommunication   # it should be same as function name defiled in account micro service
    stream:
      bindings:
        updateCommunication-in-0:    # queue name for updateCommunication function
          destination: communication-sent  # same exchange defined in acccount ms, where it is sending message
          group: ${spring.application.name}
        sendCommunication-out-0:  # exchange name
          destination: send-communication
#    bus:
#      enabled: false
#
#  rabbitmq:
#    host: "localhost"
#    port: 5672
#    username: "guest"
#    password: "guest"

      kafka:
        binder:
          brokers:
            - localhost:9092
management:
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    tags:
      application: ${spring.application.name}


  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true

endpoints:
  shutdown:
    enabled: true

  cloud:
    kubernetes:
      discovery:
        all-namespaces: true

info:
  app:
    name: "accounts"
    description: "Accounts Application"
    version: "1.0.02"

logging:
  level:
    com:
      ft:
        accounts: DEBUG

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1